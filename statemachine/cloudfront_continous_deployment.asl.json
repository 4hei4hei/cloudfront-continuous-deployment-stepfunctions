{
  "Comment": "Step Functions state machine for cloudfront-continuous-deployment",
  "StartAt": "CreateStagingDistribution",
  "States": {
    "CreateStagingDistribution": {
      "Type": "Task",
      "Resource": "${CreateStagingDistributionFunctionArn}",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ClientExecutionTimeoutException",
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "WaitForDistributionAvailable"
    },
    "WaitForDistributionAvailable": {
      "Type": "Wait",
      "Seconds": 60,
      "Next": "StatusCheckForStagingDistribution"
    },
    "StatusCheckForStagingDistribution": {
      "Type": "Task",
      "Resource": "${StatusCheckFunctionArn}",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ClientExecutionTimeoutException",
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "CheckResultForDistributionAvailable"
    },
    "CheckResultForDistributionAvailable": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.DistributionStatusResult",
          "StringEquals": "ok",
          "Next": "TestDistribution"
        },
        {
          "Variable": "$.DistributionStatusResult",
          "StringEquals": "ng",
          "Next": "WaitForDistributionAvailable"
        }
      ],
      "Default": "EndStateMachine"
    },
    "TestDistribution": {
      "Type": "Task",
      "Resource": "${TestDistributionFunctionArn}",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ClientExecutionTimeoutException",
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "CheckTestDistributionResult"
    },
    "CheckTestDistributionResult": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.TestResult",
          "StringEquals": "ok",
          "Next": "PromoteDistribution"
        },
        {
          "Variable": "$.TestResult",
          "StringEquals": "ng",
          "Next": "EndStateMachine"
        }
      ],
      "Default": "EndStateMachine"
    },
    "PromoteDistribution": {
      "Type": "Task",
      "Resource": "${PromoteDistributionFunctionArn}",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ClientExecutionTimeoutException",
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "WaitForPromoteDistribution"
    },
    "WaitForPromoteDistribution": {
      "Type": "Wait",
      "Seconds": 60,
      "Next": "StatusCheckForPromoteDistribution"
    },
    "StatusCheckForPromoteDistribution": {
      "Type": "Task",
      "Resource": "${StatusCheckFunctionArn}",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$"
      },
      "Next": "CheckResultForPromoteDistribution"
    },
    "CheckResultForPromoteDistribution": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.DistributionStatusResult",
          "StringEquals": "ok",
          "Next": "DetachContinuousDeploymentpolicy"
        },
        {
          "Variable": "$.DistributionStatusResult",
          "StringEquals": "ng",
          "Next": "WaitForPromoteDistribution"
        }
      ],
      "Default": "EndStateMachine"
    },
    "DetachContinuousDeploymentpolicy": {
      "Type": "Task",
      "Resource": "${DetachContinuousDeploymentPolicyFunctionArn}",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$"
      },
      "Next": "WaitForDisableStagingDistribution"
    },
    "WaitForDisableStagingDistribution": {
      "Type": "Wait",
      "Seconds": 60,
      "Next": "StatusCheckForDisableStagingDistribution"
    },
    "StatusCheckForDisableStagingDistribution": {
      "Type": "Task",
      "Resource": "${StatusCheckFunctionArn}",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$"
      },
      "Next": "CheckResultForDisableStagingDistribution"
    },
    "CheckResultForDisableStagingDistribution": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.DistributionStatusResult",
          "StringEquals": "ok",
          "Next": "DisableStagingDistribution"
        },
        {
          "Variable": "$.DistributionStatusResult",
          "StringEquals": "ng",
          "Next": "WaitForDisableStagingDistribution"
        }
      ],
      "Default": "EndStateMachine"
    },
    "DisableStagingDistribution": {
      "Type": "Task",
      "Resource": "${DisableStagingDistributionFunctionArn}",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ClientExecutionTimeoutException",
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "EndStateMachine"
    },
    "EndStateMachine": {
      "Type": "Pass",
      "End": true
    }
  }
}
