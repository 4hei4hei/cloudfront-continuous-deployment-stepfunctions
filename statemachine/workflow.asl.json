{
  "Comment": "State machine for cloudfront continuous deployment",
  "StartAt": "Create staging distribution",
  "States": {
    "Create staging distribution": {
      "Type": "Task",
      "Resource": "${CreateStagingDistributionFunctionArn}",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ClientExecutionTimeoutException",
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Wait for distribution to become to available"
    },
    "Wait for distribution to become to available": {
      "Type": "Wait",
      "Seconds": 180,
      "Next": "Get distribution status"
    },
    "Get distribution status": {
      "Type": "Task",
      "Resource": "${StatusCheckFunctionArn}",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ClientExecutionTimeoutException",
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Check status result"
    },
    "Check status result": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.DistributionStatusResult",
          "StringEquals": "ok",
          "Next": "Test staging distribution"
        },
        {
          "Variable": "$.DistributionStatusResult",
          "StringEquals": "ng",
          "Next": "Wait for distribution to become to available"
        }
      ],
      "Default": "Fail"
    },
    "Test staging distribution": {
      "Type": "Task",
      "Resource": "${TestDistributionFunctionArn}",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ClientExecutionTimeoutException",
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 30,
          "BackoffRate": 2
        }
      ],
      "Next": "Check test result of staging distribution"
    },
    "Check test result of staging distribution": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.TestResult",
          "StringEquals": "ok",
          "Next": "Promote distribution"
        },
        {
          "Variable": "$.TestResult",
          "StringEquals": "ng",
          "Next": "Fail"
        }
      ],
      "Default": "Fail"
    },
    "Promote distribution": {
      "Type": "Task",
      "Resource": "${PromoteDistributionFunctionArn}",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ClientExecutionTimeoutException",
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Wait for promotion"
    },
    "Wait for promotion": {
      "Type": "Wait",
      "Seconds": 180,
      "Next": "Get distribution status after promotion"
    },
    "Get distribution status after promotion": {
      "Type": "Task",
      "Resource": "${StatusCheckFunctionArn}",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$"
      },
      "Next": "Check status after promotion"
    },
    "Check status after promotion": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.DistributionStatusResult",
          "StringEquals": "ok",
          "Next": "Detach continuous deployment policy"
        },
        {
          "Variable": "$.DistributionStatusResult",
          "StringEquals": "ng",
          "Next": "Wait for promotion"
        }
      ],
      "Default": "Fail"
    },
    "Detach continuous deployment policy": {
      "Type": "Task",
      "Resource": "${DetachContinuousDeploymentPolicyFunctionArn}",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$"
      },
      "Next": "Wait for detachment of policy"
    },
    "Wait for detachment of policy": {
      "Type": "Wait",
      "Seconds": 180,
      "Next": "Get distribution status after detachment of policy"
    },
    "Get distribution status after detachment of policy": {
      "Type": "Task",
      "Resource": "${StatusCheckFunctionArn}",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$"
      },
      "Next": "Check status result after detachment of policy"
    },
    "Check status result after detachment of policy": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.DistributionStatusResult",
          "StringEquals": "ok",
          "Next": "Disable staging distribution"
        },
        {
          "Variable": "$.DistributionStatusResult",
          "StringEquals": "ng",
          "Next": "Wait for detachment of policy"
        }
      ],
      "Default": "Fail"
    },
    "Disable staging distribution": {
      "Type": "Task",
      "Resource": "${DisableStagingDistributionFunctionArn}",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ClientExecutionTimeoutException",
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Determine weather delete staging or not"
    },
    "Determine weather delete staging or not": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.DeleteStagingFlag",
          "BooleanEquals": true,
          "Next": "Wait for disabling"
        }
      ],
      "Default": "Succeed"
    },
    "Wait for disabling": {
      "Type": "Wait",
      "Seconds": 180,
      "Next": "Get distribution status after disabling"
    },
    "Get distribution status after disabling": {
      "Type": "Task",
      "Resource": "${StatusCheckFunctionArn}",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$"
      },
      "Next": "Check status after disabling"
    },
    "Check status after disabling": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.DistributionStatusResult",
          "StringEquals": "ok",
          "Next": "Delete staging distribution"
        },
        {
          "Variable": "$.DistributionStatusResult",
          "StringEquals": "ng",
          "Next": "Wait for disabling"
        }
      ],
      "Default": "Fail"
    },
    "Delete staging distribution": {
      "Type": "Task",
      "Resource": "${DeleteStagingDistributionFunctionArn}",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ClientExecutionTimeoutException",
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Succeed"
    },
    "Succeed": {
      "Type": "Succeed"
    },
    "Fail": {
      "Type": "Fail"
    }
  }
}
